using System.Collections.Generic;
using System.IO;
using BBCoders.Commons.QueryGenerator;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace BBCoders.Commons.QueryGenerator
{
    public class QueryGenerator
    {
        public static void GenerateCode(string modelSnapshotNamespace, List<ICodeGenerator> codeGenerators)
        {
            var path = CreateMigrationPath();
            var modelPath = Path.Combine(path, "DataModels.cs");
            var servicePath = Path.Combine(path, "DataServices.cs");
            CreateModels(modelPath, modelSnapshotNamespace, codeGenerators);
            CreateService(servicePath, modelSnapshotNamespace, "Services", codeGenerators);
        }

        private static void CreateModels(string path, string modelSnapshotNamespace, List<ICodeGenerator> codeGenerators)
        {
            var builder = new IndentedStringBuilder();
            GenerateComment(builder);
            builder.AppendLine("using System;");
            builder.AppendLine();
            builder.AppendLine($"namespace {modelSnapshotNamespace}");
            builder.AppendLine("{");
            using (builder.Indent())
            {
                foreach (var generator in codeGenerators)
                {
                    generator.GenerateModel(builder);
                }
            }

            builder.AppendLine("}");
            File.WriteAllText(path, builder.ToString());
        }

        public static void CreateService(string path, string modelSnapshotNamespace, string className, List<ICodeGenerator> codeGenerators)
        {
            var builder = new IndentedStringBuilder();
            GenerateComment(builder);
            builder.AppendLine("using System;");
            builder.AppendLine("using System.Data;");
            builder.AppendLine("using System.Threading.Tasks;");
            builder.AppendLine("using MySqlConnector;");
            builder.AppendLine();
            builder.AppendLine($"namespace {modelSnapshotNamespace}");
            builder.AppendLine("{");
            using (builder.Indent())
            {
                builder.AppendLine($"public class {className}");
                builder.AppendLine("{");
                using (builder.Indent())
                {
                    builder.AppendLine("private readonly string _connectionString;");
                    builder.Append($"public {className}(string connectionString)");
                    builder.AppendLine("{ this._connectionString = connectionString; }");
                    foreach (var generator in codeGenerators)
                    {
                        generator.GenerateMethod(builder, "_connectionString");
                    }
                }
                builder.AppendLine("}");
            }

            builder.AppendLine("}");
            File.WriteAllText(path, builder.ToString());
        }

        public static string CreateMigrationPath()
        {
            var assembly = Directory.GetCurrentDirectory();
            var proceduresPath = Path.Combine(assembly, "MigrationServices");
            if (Directory.Exists(proceduresPath))
            {
                Directory.Delete(proceduresPath, true);
            }
            Directory.CreateDirectory(proceduresPath);

            return proceduresPath;
        }

        private static void GenerateComment(IndentedStringBuilder builder)
        {
            builder.AppendLine("//------------------------------------------------------------------------------");
            builder.AppendLine("// <auto-generated>");
            builder.AppendLine("//");
            builder.AppendLine("// Manual changes to this file may cause unexpected behavior in your application.");
            builder.AppendLine("// Manual changes to this file will be overwritten if the code is regenerated.");
            builder.AppendLine("// </auto-generated>");
            builder.AppendLine("//------------------------------------------------------------------------------");
        }

    }

}