//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data;
using System.Data.Common;
using System.Text;
using BBCoders.Example.DataModels;

namespace BBCoders.Example.DataServices
{
    public static class ScheduleSiteRepository
    {
        public static async Task<List<ScheduleSiteModel>> SelectBatchScheduleSite(this DbConnection connection, List<ScheduleSiteKey> ScheduleSiteKey, DbTransaction transaction = null, int? timeout = null)
        {
            var IdsJoined = string.Join(",", ScheduleSiteKey.Select((_, idx) => "@Id" + idx));
            var sql = $"SELECT `s`.`Id`,`s`.`IsActive`,`s`.`Name`,`s`.`ScheduleSiteId` FROM `ScheduleSites` AS `s` WHERE `s`.`Id` IN (" + IdsJoined + ");";
            var command = connection.CreateCommand(sql, transaction, timeout);
            for (var i = 0; i< ScheduleSiteKey.Count(); i++)
            {
                command.CreateParameter("@Id" + i, ScheduleSiteKey[i].Id);
            }
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<ScheduleSiteModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new ScheduleSiteModel();
                result.Id = (Int64)reader[0];
                result.IsActive = (Boolean)reader[1];
                result.Name = (String)reader[2];
                result.ScheduleSiteId = (Guid)reader[3];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<ScheduleSiteModel>> InsertBatchScheduleSite(this DbConnection connection, List<ScheduleSiteModel> ScheduleSiteModel, DbTransaction transaction = null, int? timeout = null)
        {
            var sqlBuilder = new StringBuilder();
            for (var i = 0; i< ScheduleSiteModel.Count(); i++)
            {
                sqlBuilder.AppendLine($"INSERT INTO `ScheduleSites` (`IsActive`, `Name`, `ScheduleSiteId`) VALUES (@IsActive{i}, @Name{i}, @ScheduleSiteId{i});");
                sqlBuilder.AppendLine($"SELECT `s`.`Id`,`s`.`IsActive`,`s`.`Name`,`s`.`ScheduleSiteId` FROM `ScheduleSites` AS `s` WHERE `s`.`Id` = LAST_INSERT_ID() AND ROW_COUNT() = 1;");
            }
            var sql = sqlBuilder.ToString();
            var command = connection.CreateCommand(sql, transaction, timeout);
            for (var i = 0; i< ScheduleSiteModel.Count(); i++)
            {
                command.CreateParameter("@Id" + i, ScheduleSiteModel[i].Id);
                command.CreateParameter("@IsActive" + i, ScheduleSiteModel[i].IsActive);
                command.CreateParameter("@Name" + i, ScheduleSiteModel[i].Name);
                command.CreateParameter("@ScheduleSiteId" + i, ScheduleSiteModel[i].ScheduleSiteId);
            }
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<ScheduleSiteModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync() || (await reader.NextResultAsync() && await reader.ReadAsync()))
            {
                var result = new ScheduleSiteModel();
                result.Id = (Int64)reader[0];
                result.IsActive = (Boolean)reader[1];
                result.Name = (String)reader[2];
                result.ScheduleSiteId = (Guid)reader[3];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<ScheduleSiteModel>> UpdateBatchScheduleSite(this DbConnection connection, List<ScheduleSiteModel> ScheduleSiteModel, DbTransaction transaction = null, int? timeout = null)
        {
            var sqlBuilder = new StringBuilder();
            for (var i = 0; i< ScheduleSiteModel.Count(); i++)
            {
                sqlBuilder.AppendLine($"UPDATE `ScheduleSites` AS `s` SET `s`.`IsActive` = @IsActive{i}, `s`.`Name` = @Name{i}, `s`.`ScheduleSiteId` = @ScheduleSiteId{i} WHERE `s`.`Id` = @Id{i};");
                sqlBuilder.AppendLine($"SELECT `s`.`Id`,`s`.`IsActive`,`s`.`Name`,`s`.`ScheduleSiteId` FROM `ScheduleSites` AS `s` WHERE `s`.`Id` = @Id{i};");
            }
            var sql = sqlBuilder.ToString();
            var command = connection.CreateCommand(sql, transaction, timeout);
            for (var i = 0; i< ScheduleSiteModel.Count(); i++)
            {
                command.CreateParameter("@Id" + i, ScheduleSiteModel[i].Id);
                command.CreateParameter("@IsActive" + i, ScheduleSiteModel[i].IsActive);
                command.CreateParameter("@Name" + i, ScheduleSiteModel[i].Name);
                command.CreateParameter("@ScheduleSiteId" + i, ScheduleSiteModel[i].ScheduleSiteId);
            }
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<ScheduleSiteModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync() || (await reader.NextResultAsync() && await reader.ReadAsync()))
            {
                var result = new ScheduleSiteModel();
                result.Id = (Int64)reader[0];
                result.IsActive = (Boolean)reader[1];
                result.Name = (String)reader[2];
                result.ScheduleSiteId = (Guid)reader[3];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<int> DeleteBatchScheduleSite(this DbConnection connection, List<ScheduleSiteKey> ScheduleSiteKey, DbTransaction transaction = null, int? timeout = null)
        {
            var IdsJoined = string.Join(",", ScheduleSiteKey.Select((_, idx) => "@Id" + idx));
            var sql = $"DELETE FROM `ScheduleSites` AS `s` WHERE `s`.`Id` IN (" + IdsJoined + ");";
            var command = connection.CreateCommand(sql, transaction, timeout);
            for (var i = 0; i< ScheduleSiteKey.Count(); i++)
            {
                command.CreateParameter("@Id" + i, ScheduleSiteKey[i].Id);
            }
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        public static async Task<ScheduleSiteModel> SelectScheduleSite(this DbConnection connection, ScheduleSiteKey ScheduleSiteKey, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = $"SELECT `s`.`Id`,`s`.`IsActive`,`s`.`Name`,`s`.`ScheduleSiteId` FROM `ScheduleSites` AS `s` WHERE `s`.`Id` = @Id;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", ScheduleSiteKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<ScheduleSiteModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new ScheduleSiteModel();
                result.Id = (Int64)reader[0];
                result.IsActive = (Boolean)reader[1];
                result.Name = (String)reader[2];
                result.ScheduleSiteId = (Guid)reader[3];
                results.Add(result);
            }
            reader.Close();
            return results.FirstOrDefault();
        }
        public static async Task<ScheduleSiteModel> InsertScheduleSite(this DbConnection connection, ScheduleSiteModel ScheduleSiteModel, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = @"INSERT INTO `ScheduleSites` (`IsActive`, `Name`, `ScheduleSiteId`) VALUES (@IsActive, @Name, @ScheduleSiteId);SELECT `s`.`Id`,`s`.`IsActive`,`s`.`Name`,`s`.`ScheduleSiteId` FROM `ScheduleSites` AS `s` WHERE `s`.`Id` = LAST_INSERT_ID() AND ROW_COUNT() = 1;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@IsActive", ScheduleSiteModel.IsActive);
            command.CreateParameter("@Name", ScheduleSiteModel.Name);
            command.CreateParameter("@ScheduleSiteId", ScheduleSiteModel.ScheduleSiteId);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<ScheduleSiteModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new ScheduleSiteModel();
                result.Id = (Int64)reader[0];
                result.IsActive = (Boolean)reader[1];
                result.Name = (String)reader[2];
                result.ScheduleSiteId = (Guid)reader[3];
                results.Add(result);
            }
            reader.Close();
            return results.FirstOrDefault();
        }
        public static async Task<ScheduleSiteModel> UpdateScheduleSite(this DbConnection connection, ScheduleSiteModel ScheduleSiteModel, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = @"UPDATE `ScheduleSites` AS `s` SET `s`.`IsActive` = @IsActive, `s`.`Name` = @Name, `s`.`ScheduleSiteId` = @ScheduleSiteId WHERE `s`.`Id` = @Id;SELECT `s`.`Id`,`s`.`IsActive`,`s`.`Name`,`s`.`ScheduleSiteId` FROM `ScheduleSites` AS `s` WHERE `s`.`Id` = LAST_INSERT_ID() AND ROW_COUNT() = 1;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", ScheduleSiteModel.Id);
            command.CreateParameter("@IsActive", ScheduleSiteModel.IsActive);
            command.CreateParameter("@Name", ScheduleSiteModel.Name);
            command.CreateParameter("@ScheduleSiteId", ScheduleSiteModel.ScheduleSiteId);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<ScheduleSiteModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new ScheduleSiteModel();
                result.Id = (Int64)reader[0];
                result.IsActive = (Boolean)reader[1];
                result.Name = (String)reader[2];
                result.ScheduleSiteId = (Guid)reader[3];
                results.Add(result);
            }
            reader.Close();
            return results.FirstOrDefault();
        }
        public static async Task<int> DeleteScheduleSite(this DbConnection connection, ScheduleSiteKey ScheduleSiteKey, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = $"DELETE FROM `ScheduleSites` AS `s` WHERE `s`.`Id` = @Id;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", ScheduleSiteKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        public static async Task<List<GetScheduleSitesByLocationResponseModel>> GetScheduleSitesByLocation(this DbConnection connection, GetScheduleSitesByLocationRequestModel GetScheduleSitesByLocationRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = @"SELECT `s`.`Id`, `s`.`IsActive`, `s`.`Name`, `s`.`ScheduleSiteId`
				FROM `ScheduleSites` AS `s`
				WHERE `s`.`Name` LIKE @__Format_1";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@@__Format_1", GetScheduleSitesByLocationRequestModel.location);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<GetScheduleSitesByLocationResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new GetScheduleSitesByLocationResponseModel();
                result.ScheduleSite.Id = (Int64)reader[0];
                result.ScheduleSite.IsActive = (Boolean)reader[1];
                result.ScheduleSite.Name = (String)reader[2];
                result.ScheduleSite.ScheduleSiteId = (Guid)reader[3];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<GetSheduleSiteStatusResponseModel>> GetSheduleSiteStatus(this DbConnection connection, GetSheduleSiteStatusRequestModel GetSheduleSiteStatusRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = @"SELECT `s`.`Id`, `s`.`IsActive`, `s`.`Name`, `s`.`ScheduleSiteId`
				FROM `ScheduleSites` AS `s`
				WHERE `s`.`ScheduleSiteId` = @__Value_0";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@@__Value_0", GetSheduleSiteStatusRequestModel.id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<GetSheduleSiteStatusResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new GetSheduleSiteStatusResponseModel();
                result.ScheduleSite.Id = (Int64)reader[0];
                result.ScheduleSite.IsActive = (Boolean)reader[1];
                result.ScheduleSite.Name = (String)reader[2];
                result.ScheduleSite.ScheduleSiteId = (Guid)reader[3];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        private static DbCommand CreateCommand(this DbConnection connection, string sql, DbTransaction transaction = null, int? timeout = null)
        {
            var dbCommand = connection.CreateCommand();
            dbCommand.CommandText = sql;
            dbCommand.CommandType = CommandType.Text;
            dbCommand.Transaction = transaction;
            dbCommand.CommandTimeout = timeout.HasValue ? timeout.Value : dbCommand.CommandTimeout;
            return dbCommand;
        }
        private static DbParameter CreateParameter(this DbCommand command, string name, object value)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value;
            command.Parameters.Add(parameter);
            return parameter;
        }
    }
}
