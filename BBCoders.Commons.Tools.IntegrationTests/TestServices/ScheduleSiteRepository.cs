//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Threading.Tasks;
using MySqlConnector;

namespace BBCoders.Example.DataServices
{
    public class ScheduleSiteRepository
    {
        private readonly string _connectionString;
        public ScheduleSiteRepository(string connectionString){ this._connectionString = connectionString; }
        public async Task<ScheduleSiteSelectModel> SelectScheduleSite(Int64 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT `s`.`Id`,`s`.`IsActive`,`s`.`Name`,`s`.`ScheduleSiteId` 
                FROM `ScheduleSites` AS `s`
                WHERE `s`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                ScheduleSiteSelectModel result = null;
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    result = new ScheduleSiteSelectModel();
                    result.Id = (Int64)reader["Id"];
                    result.IsActive = (Boolean)reader["IsActive"];
                    result.Name = (String)reader["Name"];
                    result.ScheduleSiteId = (Byte[])reader["ScheduleSiteId"];
                }
                reader.Close();
                return result;
            }
        }
        public async Task<Int64> InsertScheduleSite(ScheduleSiteInsertModel ScheduleSiteInsertModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `ScheduleSites` (`IsActive`, `Name`, `ScheduleSiteId`) VALUES (@IsActive, @Name, @ScheduleSiteId);
                SELECT LAST_INSERT_ID()";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@IsActive", ScheduleSiteInsertModel.IsActive);
                cmd.Parameters.AddWithValue("@Name", ScheduleSiteInsertModel.Name);
                cmd.Parameters.AddWithValue("@ScheduleSiteId", ScheduleSiteInsertModel.ScheduleSiteId);
                return Convert.ToInt64(await cmd.ExecuteScalarAsync());
            }
        }
        public async Task<int> UpdateScheduleSite(ScheduleSiteUpdateModel ScheduleSiteUpdateModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `ScheduleSites` AS `s`
                SET `s`.`IsActive` = @IsActive, `s`.`Name` = @Name, `s`.`ScheduleSiteId` = @ScheduleSiteId
                WHERE `s`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", ScheduleSiteUpdateModel.Id);
                cmd.Parameters.AddWithValue("@IsActive", ScheduleSiteUpdateModel.IsActive);
                cmd.Parameters.AddWithValue("@Name", ScheduleSiteUpdateModel.Name);
                cmd.Parameters.AddWithValue("@ScheduleSiteId", ScheduleSiteUpdateModel.ScheduleSiteId);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteScheduleSite(Int64 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `ScheduleSites` AS `s`
                WHERE `s`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<GetshedulesitestatusResponseModel> Getshedulesitestatus(GetshedulesitestatusRequestModel GetshedulesitestatusRequestModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT `s`.`Id`, `s`.`IsActive`, `s`.`Name`, `s`.`ScheduleSiteId`
FROM `ScheduleSites` AS `s`
WHERE `s`.`ScheduleSiteId` = @__Value_0";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@__Value_0", GetshedulesitestatusRequestModel.id);
                GetshedulesitestatusResponseModel result = null;
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    result = new GetshedulesitestatusResponseModel();
                    result.Id = (Int64)reader["Id"];
                    result.IsActive = (Boolean)reader["IsActive"];
                    result.Name = (String)reader["Name"];
                    result.ScheduleSiteId = (Byte[])reader["ScheduleSiteId"];
                }
                reader.Close();
                return result;
            }
        }
    }
}
