//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data;
using System.Data.Common;

namespace BBCoders.Example.DataServices
{
    public static class ScheduleRepository
    {
        public static async Task<ScheduleModel> SelectSchedule(this DbConnection connection, ScheduleKey scheduleKey, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT * FROM `Schedules` AS `s` WHERE `s`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", scheduleKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await GetScheduleResultSet(command);
        }
        public static async Task<ScheduleModel> InsertSchedule(this DbConnection connection, ScheduleModel scheduleModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"INSERT INTO `Schedules` (`ActionId`, `CreatedById`, `CreatedDate`, `FingerPrintId`, `LastUpdatedById`, `LastUpdatedDate`, `ScheduleDate`, `ScheduleId`, `ScheduleSiteId`) VALUES (@ActionId, @CreatedById, @CreatedDate, @FingerPrintId, @LastUpdatedById, @LastUpdatedDate, @ScheduleDate, @ScheduleId, @ScheduleSiteId);
SELECT * FROM `Schedules` AS `s` WHERE `s`.`Id` = LAST_INSERT_ID()";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@ActionId", scheduleModel.ActionId);
            command.CreateParameter("@CreatedById", scheduleModel.CreatedById);
            command.CreateParameter("@CreatedDate", scheduleModel.CreatedDate);
            command.CreateParameter("@FingerPrintId", scheduleModel.FingerPrintId);
            command.CreateParameter("@LastUpdatedById", scheduleModel.LastUpdatedById);
            command.CreateParameter("@LastUpdatedDate", scheduleModel.LastUpdatedDate);
            command.CreateParameter("@ScheduleDate", scheduleModel.ScheduleDate);
            command.CreateParameter("@ScheduleId", scheduleModel.ScheduleId);
            command.CreateParameter("@ScheduleSiteId", scheduleModel.ScheduleSiteId);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await GetScheduleResultSet(command, scheduleModel);
        }
        public static async Task<int> UpdateSchedule(this DbConnection connection, ScheduleModel scheduleModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"UPDATE `Schedules` AS `s` SET `s`.`ActionId` = @ActionId, `s`.`CreatedById` = @CreatedById, `s`.`CreatedDate` = @CreatedDate, `s`.`FingerPrintId` = @FingerPrintId, `s`.`LastUpdatedById` = @LastUpdatedById, `s`.`LastUpdatedDate` = @LastUpdatedDate, `s`.`ScheduleDate` = @ScheduleDate, `s`.`ScheduleId` = @ScheduleId, `s`.`ScheduleSiteId` = @ScheduleSiteId WHERE `s`.`Id` = @Id;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", scheduleModel.Id);
            command.CreateParameter("@ActionId", scheduleModel.ActionId);
            command.CreateParameter("@CreatedById", scheduleModel.CreatedById);
            command.CreateParameter("@CreatedDate", scheduleModel.CreatedDate);
            command.CreateParameter("@FingerPrintId", scheduleModel.FingerPrintId);
            command.CreateParameter("@LastUpdatedById", scheduleModel.LastUpdatedById);
            command.CreateParameter("@LastUpdatedDate", scheduleModel.LastUpdatedDate);
            command.CreateParameter("@ScheduleDate", scheduleModel.ScheduleDate);
            command.CreateParameter("@ScheduleId", scheduleModel.ScheduleId);
            command.CreateParameter("@ScheduleSiteId", scheduleModel.ScheduleSiteId);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        public static async Task<int> DeleteSchedule(this DbConnection connection, ScheduleKey scheduleKey, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"DELETE FROM `Schedules` AS `s` WHERE `s`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", scheduleKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        private static async Task<ScheduleModel> GetScheduleResultSet(DbCommand cmd, ScheduleModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new ScheduleModel();
                result.Id = (Int64)reader["Id"];
                result.ActionId = Convert.IsDBNull(reader["ActionId"]) ? null : (Int64?)reader["ActionId"];
                result.CreatedById = (Int64)reader["CreatedById"];
                result.CreatedDate = (DateTime)reader["CreatedDate"];
                result.FingerPrintId = Convert.IsDBNull(reader["FingerPrintId"]) ? null : (Int64?)reader["FingerPrintId"];
                result.LastUpdatedById = (Int64)reader["LastUpdatedById"];
                result.LastUpdatedDate = (DateTime)reader["LastUpdatedDate"];
                result.ScheduleDate = (DateTime)reader["ScheduleDate"];
                result.ScheduleId = (Byte[])reader["ScheduleId"];
                result.ScheduleSiteId = (Int64)reader["ScheduleSiteId"];
            }
            reader.Close();
            return result;
        }
        public static async Task<List<GetSheduleActionResponseModel>> GetSheduleAction(this DbConnection connection, GetSheduleActionRequestModel getSheduleActionRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT `s`.`ActionId` AS `action`, `s`.`Id` AS `id`, `s`.`ScheduleId` AS `schedule_id`
				FROM `Schedules` AS `s`
				WHERE `s`.`ScheduleId` = @__Value_0";

            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@__Value_0", getSheduleActionRequestModel.id);
            List<GetSheduleActionResponseModel> results = new List<GetSheduleActionResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                GetSheduleActionResponseModel result = new GetSheduleActionResponseModel();
                result.Schedule.action = Convert.IsDBNull(reader[0]) ? null : (Int64?)reader[0];
                result.Schedule.id = (Int64)reader[1];
                result.Schedule.schedule_id = (Byte[])reader[2];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<GetSheduleResponseModel>> GetShedule(this DbConnection connection, GetSheduleRequestModel getSheduleRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT `s`.`Id`, `s`.`ActionId`, `s`.`CreatedById`, `s`.`CreatedDate`, `s`.`FingerPrintId`, `s`.`LastUpdatedById`, `s`.`LastUpdatedDate`, `s`.`ScheduleDate`, `s`.`ScheduleId`, `s`.`ScheduleSiteId`, `s0`.`Id`, `s0`.`IsActive`, `s0`.`Name`, `s0`.`ScheduleSiteId`
				FROM `Schedules` AS `s`
				INNER JOIN `ScheduleSites` AS `s0` ON `s`.`ScheduleSiteId` = `s0`.`Id`
				WHERE `s`.`ScheduleId` = @__Value_0";

            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@__Value_0", getSheduleRequestModel.id);
            List<GetSheduleResponseModel> results = new List<GetSheduleResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                GetSheduleResponseModel result = new GetSheduleResponseModel();
                result.Schedule.Id = (Int64)reader[0];
                result.Schedule.ActionId = Convert.IsDBNull(reader[1]) ? null : (Int64?)reader[1];
                result.Schedule.CreatedById = (Int64)reader[2];
                result.Schedule.CreatedDate = (DateTime)reader[3];
                result.Schedule.FingerPrintId = Convert.IsDBNull(reader[4]) ? null : (Int64?)reader[4];
                result.Schedule.LastUpdatedById = (Int64)reader[5];
                result.Schedule.LastUpdatedDate = (DateTime)reader[6];
                result.Schedule.ScheduleDate = (DateTime)reader[7];
                result.Schedule.ScheduleId = (Byte[])reader[8];
                result.Schedule.ScheduleSiteId = (Int64)reader[9];
                result.ScheduleSite.Id = (Int64)reader[10];
                result.ScheduleSite.IsActive = (Boolean)reader[11];
                result.ScheduleSite.Name = (String)reader[12];
                result.ScheduleSite.ScheduleSiteId = (Byte[])reader[13];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<GetScheduleActionAndLocationResponseModel>> GetScheduleActionAndLocation(this DbConnection connection, GetScheduleActionAndLocationRequestModel getScheduleActionAndLocationRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT `s`.`Id`, `s`.`ActionId`, `s`.`CreatedById`, `s`.`CreatedDate`, `s`.`FingerPrintId`, `s`.`LastUpdatedById`, `s`.`LastUpdatedDate`, `s`.`ScheduleDate`, `s`.`ScheduleId`, `s`.`ScheduleSiteId`, `a`.`Id`, `a`.`ActionId`, `a`.`Name`, `s0`.`Id`, `s0`.`IsActive`, `s0`.`Name`, `s0`.`ScheduleSiteId`
				FROM `Schedules` AS `s`
				INNER JOIN `Actions` AS `a` ON `s`.`ActionId` = `a`.`Id`
				INNER JOIN `ScheduleSites` AS `s0` ON `s`.`ScheduleSiteId` = `s0`.`Id`
				WHERE (`a`.`ActionId` = @__Value_0) AND (`s0`.`ScheduleSiteId` = @__Value_1)";

            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@__Value_0", getScheduleActionAndLocationRequestModel.ActionId);
            command.CreateParameter("@__Value_1", getScheduleActionAndLocationRequestModel.LocationId);
            List<GetScheduleActionAndLocationResponseModel> results = new List<GetScheduleActionAndLocationResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                GetScheduleActionAndLocationResponseModel result = new GetScheduleActionAndLocationResponseModel();
                result.Schedule.Id = (Int64)reader[0];
                result.Schedule.ActionId = Convert.IsDBNull(reader[1]) ? null : (Int64?)reader[1];
                result.Schedule.CreatedById = (Int64)reader[2];
                result.Schedule.CreatedDate = (DateTime)reader[3];
                result.Schedule.FingerPrintId = Convert.IsDBNull(reader[4]) ? null : (Int64?)reader[4];
                result.Schedule.LastUpdatedById = (Int64)reader[5];
                result.Schedule.LastUpdatedDate = (DateTime)reader[6];
                result.Schedule.ScheduleDate = (DateTime)reader[7];
                result.Schedule.ScheduleId = (Byte[])reader[8];
                result.Schedule.ScheduleSiteId = (Int64)reader[9];
                result.Action.Id = (Int64)reader[10];
                result.Action.ActionId = (Byte[])reader[11];
                result.Action.Name = (String)reader[12];
                result.ScheduleSite.Id = (Int64)reader[13];
                result.ScheduleSite.IsActive = (Boolean)reader[14];
                result.ScheduleSite.Name = (String)reader[15];
                result.ScheduleSite.ScheduleSiteId = (Byte[])reader[16];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<GetSheduleAsyncResponseModel>> GetSheduleAsync(this DbConnection connection, GetSheduleAsyncRequestModel getSheduleAsyncRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT `s`.`Id`, `s`.`CreatedById` AS `Test`, TRUE AS `StateActive`, `s0`.`Id`, `s0`.`Name`, `s0`.`StateId`
				FROM `Schedules` AS `s`
				LEFT JOIN `Fingerprint` AS `f` ON `s`.`FingerPrintId` = `f`.`Id`
				LEFT JOIN `States` AS `s0` ON `f`.`StateId` = `s0`.`Id`
				WHERE `s`.`ScheduleId` = @__Value_0";

            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@__Value_0", getSheduleAsyncRequestModel.id);
            List<GetSheduleAsyncResponseModel> results = new List<GetSheduleAsyncResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                GetSheduleAsyncResponseModel result = new GetSheduleAsyncResponseModel();
                result.Schedule.Id = (Int64)reader[0];
                result.Schedule.Test = (Int64)reader[1];
                result.StateActive = (Boolean)reader[2];
                result.State.Id = Convert.IsDBNull(reader[3]) ? null : (Int64?)reader[3];
                result.State.Name = Convert.IsDBNull(reader[4]) ? null : (String)reader[4];
                result.State.StateId = Convert.IsDBNull(reader[5]) ? null : (Byte[])reader[5];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<GetSheduleAsync2ResponseModel>> GetSheduleAsync2(this DbConnection connection, GetSheduleAsync2RequestModel getSheduleAsync2RequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT COUNT(*)
				FROM `Schedules` AS `s`
				GROUP BY `s`.`Id`";

            var command = connection.CreateCommand(sql, transaction, timeout);
            List<GetSheduleAsync2ResponseModel> results = new List<GetSheduleAsync2ResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                GetSheduleAsync2ResponseModel result = new GetSheduleAsync2ResponseModel();
                result.Value_0 = (Int32)reader[0];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        private static DbCommand CreateCommand(this DbConnection connection, string sql, DbTransaction transaction = null, int? timeout = null)
        {
            var dbCommand = connection.CreateCommand();
            dbCommand.CommandText = sql;
            dbCommand.CommandType = CommandType.Text;
            dbCommand.Transaction = transaction;
            dbCommand.CommandTimeout = timeout.HasValue ? timeout.Value : dbCommand.CommandTimeout;
            return dbCommand;
        }
        private static DbParameter CreateParameter(this DbCommand command, string name, object value)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value;
            command.Parameters.Add(parameter);
            return parameter;
        }
    }
}
