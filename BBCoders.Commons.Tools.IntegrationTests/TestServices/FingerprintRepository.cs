//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using MySqlConnector;

namespace BBCoders.Example.DataServices
{
    public class FingerprintRepository
    {
        private readonly string _connectionString;
        public FingerprintRepository(string connectionString){ this._connectionString = connectionString; }
        public async Task<FingerprintModel> SelectFingerprint(Int64 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT * FROM `Fingerprint` AS `f` WHERE `f`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await GetFingerprintResultSet(cmd);
            }
        }
        private async Task<FingerprintModel> GetFingerprintResultSet(MySqlCommand cmd, FingerprintModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new FingerprintModel();
                result.Id = (Int64)reader["Id"];
                result.CreatedById = (Int64)reader["CreatedById"];
                result.CreatedDate = (DateTime)reader["CreatedDate"];
                result.ExpirationDate = Convert.IsDBNull(reader["ExpirationDate"]) ? null : (DateTime?)reader["ExpirationDate"];
                result.FingerprintId = (Byte[])reader["FingerprintId"];
                result.IsActive = (Boolean)reader["IsActive"];
                result.LastUpdatedById = (Int64)reader["LastUpdatedById"];
                result.NmlsId = (Int64)reader["NmlsId"];
                result.RenewalDate = Convert.IsDBNull(reader["RenewalDate"]) ? null : (DateTime?)reader["RenewalDate"];
                result.StateId = (Int64)reader["StateId"];
                result.UpdatedDate = (DateTime)reader["UpdatedDate"];
            }
            reader.Close();
            return result;
        }
        public async Task<FingerprintModel> InsertFingerprint(FingerprintModel FingerprintModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `Fingerprint` (`CreatedById`, `CreatedDate`, `ExpirationDate`, `FingerprintId`, `IsActive`, `LastUpdatedById`, `NmlsId`, `RenewalDate`, `StateId`, `UpdatedDate`) VALUES (@CreatedById, If(@CreatedDate IS NULL,DEFAULT(`Fingerprint`.`CreatedDate`), @CreatedDate), @ExpirationDate, @FingerprintId, @IsActive, @LastUpdatedById, @NmlsId, @RenewalDate, @StateId, @UpdatedDate);
                SELECT * FROM `Fingerprint` AS `f` WHERE `f`.`Id` = LAST_INSERT_ID()";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@CreatedById", FingerprintModel.CreatedById);
                cmd.Parameters.AddWithValue("@CreatedDate", FingerprintModel.CreatedDate);
                cmd.Parameters.AddWithValue("@ExpirationDate", FingerprintModel.ExpirationDate);
                cmd.Parameters.AddWithValue("@FingerprintId", FingerprintModel.FingerprintId);
                cmd.Parameters.AddWithValue("@IsActive", FingerprintModel.IsActive);
                cmd.Parameters.AddWithValue("@LastUpdatedById", FingerprintModel.LastUpdatedById);
                cmd.Parameters.AddWithValue("@NmlsId", FingerprintModel.NmlsId);
                cmd.Parameters.AddWithValue("@RenewalDate", FingerprintModel.RenewalDate);
                cmd.Parameters.AddWithValue("@StateId", FingerprintModel.StateId);
                cmd.Parameters.AddWithValue("@UpdatedDate", FingerprintModel.UpdatedDate);
                return await GetFingerprintResultSet(cmd, FingerprintModel);
            }
        }
        public async Task<int> UpdateFingerprint(FingerprintModel FingerprintModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `Fingerprint` AS `f` SET `f`.`CreatedById` = @CreatedById, `f`.`CreatedDate` = If(@CreatedDate IS NULL,DEFAULT(`f`.`CreatedDate`), @CreatedDate), `f`.`ExpirationDate` = @ExpirationDate, `f`.`FingerprintId` = @FingerprintId, `f`.`IsActive` = @IsActive, `f`.`LastUpdatedById` = @LastUpdatedById, `f`.`NmlsId` = @NmlsId, `f`.`RenewalDate` = @RenewalDate, `f`.`StateId` = @StateId, `f`.`UpdatedDate` = @UpdatedDate WHERE `f`.`Id` = @Id;";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", FingerprintModel.Id);
                cmd.Parameters.AddWithValue("@CreatedById", FingerprintModel.CreatedById);
                cmd.Parameters.AddWithValue("@CreatedDate", FingerprintModel.CreatedDate);
                cmd.Parameters.AddWithValue("@ExpirationDate", FingerprintModel.ExpirationDate);
                cmd.Parameters.AddWithValue("@FingerprintId", FingerprintModel.FingerprintId);
                cmd.Parameters.AddWithValue("@IsActive", FingerprintModel.IsActive);
                cmd.Parameters.AddWithValue("@LastUpdatedById", FingerprintModel.LastUpdatedById);
                cmd.Parameters.AddWithValue("@NmlsId", FingerprintModel.NmlsId);
                cmd.Parameters.AddWithValue("@RenewalDate", FingerprintModel.RenewalDate);
                cmd.Parameters.AddWithValue("@StateId", FingerprintModel.StateId);
                cmd.Parameters.AddWithValue("@UpdatedDate", FingerprintModel.UpdatedDate);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteFingerprint(Int64 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `Fingerprint` AS `f` WHERE `f`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<List<GetFingerprintByGuidsResponseModel>> GetFingerprintByGuids(GetFingerprintByGuidsRequestModel GetFingerprintByGuidsRequestModel)
        {
            var testsJoined = string.Join(",", GetFingerprintByGuidsRequestModel?.test.Select((x,y) => "@test" + y.ToString()).ToArray());
            string sql = @"SELECT `f`.`Id`, `f`.`CreatedById`, `f`.`CreatedDate`, `f`.`ExpirationDate`, `f`.`FingerprintId`, `f`.`IsActive`, `f`.`LastUpdatedById`, `f`.`NmlsId`, `f`.`RenewalDate`, `f`.`StateId`, `f`.`UpdatedDate`
				FROM `Fingerprint` AS `f`
				WHERE `f`.`FingerprintId` IN (" + testsJoined + @")";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                var testsParameters = GetFingerprintByGuidsRequestModel?.test.Select((x,y) => new MySqlParameter("@test" + y.ToString(), x)).ToArray();
                cmd.Parameters.AddRange(testsParameters);
                List<GetFingerprintByGuidsResponseModel> results = new List<GetFingerprintByGuidsResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetFingerprintByGuidsResponseModel result = new GetFingerprintByGuidsResponseModel();
                    result.FingerprintId = (Int64)reader[0];
                    result.FingerprintCreatedById = (Int64)reader[1];
                    result.FingerprintCreatedDate = (DateTime)reader[2];
                    result.FingerprintExpirationDate = Convert.IsDBNull(reader[3]) ? null : (DateTime?)reader[3];
                    result.FingerprintFingerprintId = (Byte[])reader[4];
                    result.FingerprintIsActive = (Boolean)reader[5];
                    result.FingerprintLastUpdatedById = (Int64)reader[6];
                    result.FingerprintNmlsId = (Int64)reader[7];
                    result.FingerprintRenewalDate = Convert.IsDBNull(reader[8]) ? null : (DateTime?)reader[8];
                    result.FingerprintStateId = (Int64)reader[9];
                    result.FingerprintUpdatedDate = (DateTime)reader[10];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
        public async Task<List<GetFingerprintsByIdResponseModel>> GetFingerprintsById(GetFingerprintsByIdRequestModel GetFingerprintsByIdRequestModel)
        {
            var testsJoined = string.Join(",", GetFingerprintsByIdRequestModel?.test.Select((x,y) => "@test" + y.ToString()).ToArray());
            string sql = @"SELECT `f`.`Id`, `f`.`FingerprintId`, `f`.`IsActive`
				FROM `Fingerprint` AS `f`
				WHERE `f`.`Id` IN (" + testsJoined + @")";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                var testsParameters = GetFingerprintsByIdRequestModel?.test.Select((x,y) => new MySqlParameter("@test" + y.ToString(), x)).ToArray();
                cmd.Parameters.AddRange(testsParameters);
                List<GetFingerprintsByIdResponseModel> results = new List<GetFingerprintsByIdResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetFingerprintsByIdResponseModel result = new GetFingerprintsByIdResponseModel();
                    result.FingerprintId = (Int64)reader[0];
                    result.FingerprintFingerprintId = (Byte[])reader[1];
                    result.FingerprintIsActive = (Boolean)reader[2];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
        public async Task<List<GetFingerprintByStateIdResponseModel>> GetFingerprintByStateId(GetFingerprintByStateIdRequestModel GetFingerprintByStateIdRequestModel)
        {
            var fingerprintIdsJoined = string.Join(",", GetFingerprintByStateIdRequestModel?.fingerprintId.Select((x,y) => "@fingerprintId" + y.ToString()).ToArray());
            var stateIdsJoined = string.Join(",", GetFingerprintByStateIdRequestModel?.stateId.Select((x,y) => "@stateId" + y.ToString()).ToArray());
            string sql = @"SELECT `f`.`Id`, `f`.`CreatedById`, `f`.`CreatedDate`, `f`.`ExpirationDate`, `f`.`FingerprintId`, `f`.`IsActive`, `f`.`LastUpdatedById`, `f`.`NmlsId`, `f`.`RenewalDate`, `f`.`StateId`, `f`.`UpdatedDate`, `s`.`Id`, `s`.`Name`, `s`.`StateId`
				FROM `Fingerprint` AS `f`
				INNER JOIN `States` AS `s` ON `f`.`StateId` = `s`.`Id`
				WHERE (`f`.`FingerprintId` IN (" + stateIdsJoined + @") AND (`f`.`IsActive` = @__Value_1)) AND `s`.`StateId` IN (" + stateIdsJoined + @")";
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@__Value_1", GetFingerprintByStateIdRequestModel.active);
                var fingerprintIdsParameters = GetFingerprintByStateIdRequestModel?.fingerprintId.Select((x,y) => new MySqlParameter("@fingerprintId" + y.ToString(), x)).ToArray();
                cmd.Parameters.AddRange(fingerprintIdsParameters);
                var stateIdsParameters = GetFingerprintByStateIdRequestModel?.stateId.Select((x,y) => new MySqlParameter("@stateId" + y.ToString(), x)).ToArray();
                cmd.Parameters.AddRange(stateIdsParameters);
                List<GetFingerprintByStateIdResponseModel> results = new List<GetFingerprintByStateIdResponseModel>();
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    GetFingerprintByStateIdResponseModel result = new GetFingerprintByStateIdResponseModel();
                    result.FingerprintId = (Int64)reader[0];
                    result.FingerprintCreatedById = (Int64)reader[1];
                    result.FingerprintCreatedDate = (DateTime)reader[2];
                    result.FingerprintExpirationDate = Convert.IsDBNull(reader[3]) ? null : (DateTime?)reader[3];
                    result.FingerprintFingerprintId = (Byte[])reader[4];
                    result.FingerprintIsActive = (Boolean)reader[5];
                    result.FingerprintLastUpdatedById = (Int64)reader[6];
                    result.FingerprintNmlsId = (Int64)reader[7];
                    result.FingerprintRenewalDate = Convert.IsDBNull(reader[8]) ? null : (DateTime?)reader[8];
                    result.FingerprintStateId = (Int64)reader[9];
                    result.FingerprintUpdatedDate = (DateTime)reader[10];
                    result.StateId = (Int64)reader[11];
                    result.StateName = Convert.IsDBNull(reader[12]) ? null : (String)reader[12];
                    result.StateStateId = (Byte[])reader[13];
                    results.Add(result);
                }
                reader.Close();
                return results;
            }
        }
    }
}
