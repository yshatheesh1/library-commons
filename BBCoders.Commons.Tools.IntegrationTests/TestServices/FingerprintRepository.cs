//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Threading.Tasks;
using MySqlConnector;

namespace BBCoders.Example.DataServices
{
    public class FingerprintRepository
    {
        private readonly string _connectionString;
        public FingerprintRepository(string connectionString){ this._connectionString = connectionString; }
        public async Task<FingerprintSelectModel> SelectFingerprint(Int64 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"SELECT `f`.`Id`,`f`.`CreatedById`,`f`.`CreatedDate`,`f`.`ExpirationDate`,`f`.`FingerprintId`,`f`.`IsActive`,`f`.`LastUpdatedById`,`f`.`NmlsId`,`f`.`RenewalDate`,`f`.`StateId`,`f`.`UpdatedDate` 
                FROM `Fingerprint` AS `f`
                WHERE `f`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                FingerprintSelectModel result = null;
                var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    result = new FingerprintSelectModel();
                    result.Id = (Int64)reader["Id"];
                    result.CreatedById = (Int64)reader["CreatedById"];
                    result.CreatedDate = (DateTime)reader["CreatedDate"];
                    result.ExpirationDate = (DateTime?)reader["ExpirationDate"];
                    result.FingerprintId = (Byte[])reader["FingerprintId"];
                    result.IsActive = (Boolean)reader["IsActive"];
                    result.LastUpdatedById = (Int64)reader["LastUpdatedById"];
                    result.NmlsId = (Int64)reader["NmlsId"];
                    result.RenewalDate = (DateTime?)reader["RenewalDate"];
                    result.StateId = (Int64)reader["StateId"];
                    result.UpdatedDate = (DateTime)reader["UpdatedDate"];
                }
                reader.Close();
                return result;
            }
        }
        public async Task<Int64> InsertFingerprint(FingerprintInsertModel FingerprintInsertModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"INSERT INTO `Fingerprint` (`CreatedById`, `CreatedDate`, `ExpirationDate`, `FingerprintId`, `IsActive`, `LastUpdatedById`, `NmlsId`, `RenewalDate`, `StateId`, `UpdatedDate`) VALUES (@CreatedById, @CreatedDate, @ExpirationDate, If(@FingerprintId IS NULL,DEFAULT(`Fingerprint`.`FingerprintId`), @FingerprintId), @IsActive, @LastUpdatedById, @NmlsId, @RenewalDate, @StateId, @UpdatedDate);
                SELECT LAST_INSERT_ID()";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@CreatedById", FingerprintInsertModel.CreatedById);
                cmd.Parameters.AddWithValue("@CreatedDate", FingerprintInsertModel.CreatedDate);
                cmd.Parameters.AddWithValue("@ExpirationDate", FingerprintInsertModel.ExpirationDate);
                cmd.Parameters.AddWithValue("@FingerprintId", FingerprintInsertModel.FingerprintId);
                cmd.Parameters.AddWithValue("@IsActive", FingerprintInsertModel.IsActive);
                cmd.Parameters.AddWithValue("@LastUpdatedById", FingerprintInsertModel.LastUpdatedById);
                cmd.Parameters.AddWithValue("@NmlsId", FingerprintInsertModel.NmlsId);
                cmd.Parameters.AddWithValue("@RenewalDate", FingerprintInsertModel.RenewalDate);
                cmd.Parameters.AddWithValue("@StateId", FingerprintInsertModel.StateId);
                cmd.Parameters.AddWithValue("@UpdatedDate", FingerprintInsertModel.UpdatedDate);
                return Convert.ToInt64(await cmd.ExecuteScalarAsync());
            }
        }
        public async Task<int> UpdateFingerprint(FingerprintUpdateModel FingerprintUpdateModel)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"UPDATE `Fingerprint` AS `f`
                SET `f`.`CreatedById` = @CreatedById, `f`.`CreatedDate` = @CreatedDate, `f`.`ExpirationDate` = @ExpirationDate, `f`.`FingerprintId` = If(@FingerprintId IS NULL,DEFAULT(`f`.`FingerprintId`), @FingerprintId), `f`.`IsActive` = @IsActive, `f`.`LastUpdatedById` = @LastUpdatedById, `f`.`NmlsId` = @NmlsId, `f`.`RenewalDate` = @RenewalDate, `f`.`StateId` = @StateId, `f`.`UpdatedDate` = @UpdatedDate
                WHERE `f`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", FingerprintUpdateModel.Id);
                cmd.Parameters.AddWithValue("@CreatedById", FingerprintUpdateModel.CreatedById);
                cmd.Parameters.AddWithValue("@CreatedDate", FingerprintUpdateModel.CreatedDate);
                cmd.Parameters.AddWithValue("@ExpirationDate", FingerprintUpdateModel.ExpirationDate);
                cmd.Parameters.AddWithValue("@FingerprintId", FingerprintUpdateModel.FingerprintId);
                cmd.Parameters.AddWithValue("@IsActive", FingerprintUpdateModel.IsActive);
                cmd.Parameters.AddWithValue("@LastUpdatedById", FingerprintUpdateModel.LastUpdatedById);
                cmd.Parameters.AddWithValue("@NmlsId", FingerprintUpdateModel.NmlsId);
                cmd.Parameters.AddWithValue("@RenewalDate", FingerprintUpdateModel.RenewalDate);
                cmd.Parameters.AddWithValue("@StateId", FingerprintUpdateModel.StateId);
                cmd.Parameters.AddWithValue("@UpdatedDate", FingerprintUpdateModel.UpdatedDate);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
        public async Task<int> DeleteFingerprint(Int64 Id)
        {
            using(var connection = new MySqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                string sql = @"DELETE FROM `Fingerprint` AS `f`
                WHERE `f`.`Id` = @Id";
                var cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue("@Id", Id);
                return await cmd.ExecuteNonQueryAsync();
            }
        }
    }
}
