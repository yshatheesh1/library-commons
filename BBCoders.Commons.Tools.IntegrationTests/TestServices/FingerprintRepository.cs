//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data;
using System.Data.Common;

namespace BBCoders.Example.DataServices
{
    public static class FingerprintRepository
    {
        public static async Task<FingerprintModel> SelectFingerprint(this DbConnection connection, FingerprintKey fingerprintKey, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT * FROM `Fingerprint` AS `f` WHERE `f`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", fingerprintKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await GetFingerprintResultSet(command);
        }
        public static async Task<FingerprintModel> InsertFingerprint(this DbConnection connection, FingerprintModel fingerprintModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"INSERT INTO `Fingerprint` (`CreatedById`, `CreatedDate`, `ExpirationDate`, `FingerprintId`, `IsActive`, `LastUpdatedById`, `NmlsId`, `RenewalDate`, `StateId`, `UpdatedDate`) VALUES (@CreatedById, If(@CreatedDate IS NULL,DEFAULT(`Fingerprint`.`CreatedDate`), @CreatedDate), @ExpirationDate, @FingerprintId, @IsActive, @LastUpdatedById, @NmlsId, @RenewalDate, @StateId, @UpdatedDate);
SELECT * FROM `Fingerprint` AS `f` WHERE `f`.`Id` = LAST_INSERT_ID()";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@CreatedById", fingerprintModel.CreatedById);
            command.CreateParameter("@CreatedDate", fingerprintModel.CreatedDate);
            command.CreateParameter("@ExpirationDate", fingerprintModel.ExpirationDate);
            command.CreateParameter("@FingerprintId", fingerprintModel.FingerprintId);
            command.CreateParameter("@IsActive", fingerprintModel.IsActive);
            command.CreateParameter("@LastUpdatedById", fingerprintModel.LastUpdatedById);
            command.CreateParameter("@NmlsId", fingerprintModel.NmlsId);
            command.CreateParameter("@RenewalDate", fingerprintModel.RenewalDate);
            command.CreateParameter("@StateId", fingerprintModel.StateId);
            command.CreateParameter("@UpdatedDate", fingerprintModel.UpdatedDate);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await GetFingerprintResultSet(command, fingerprintModel);
        }
        public static async Task<int> UpdateFingerprint(this DbConnection connection, FingerprintModel fingerprintModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"UPDATE `Fingerprint` AS `f` SET `f`.`CreatedById` = @CreatedById, `f`.`CreatedDate` = If(@CreatedDate IS NULL,DEFAULT(`f`.`CreatedDate`), @CreatedDate), `f`.`ExpirationDate` = @ExpirationDate, `f`.`FingerprintId` = @FingerprintId, `f`.`IsActive` = @IsActive, `f`.`LastUpdatedById` = @LastUpdatedById, `f`.`NmlsId` = @NmlsId, `f`.`RenewalDate` = @RenewalDate, `f`.`StateId` = @StateId, `f`.`UpdatedDate` = @UpdatedDate WHERE `f`.`Id` = @Id;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", fingerprintModel.Id);
            command.CreateParameter("@CreatedById", fingerprintModel.CreatedById);
            command.CreateParameter("@CreatedDate", fingerprintModel.CreatedDate);
            command.CreateParameter("@ExpirationDate", fingerprintModel.ExpirationDate);
            command.CreateParameter("@FingerprintId", fingerprintModel.FingerprintId);
            command.CreateParameter("@IsActive", fingerprintModel.IsActive);
            command.CreateParameter("@LastUpdatedById", fingerprintModel.LastUpdatedById);
            command.CreateParameter("@NmlsId", fingerprintModel.NmlsId);
            command.CreateParameter("@RenewalDate", fingerprintModel.RenewalDate);
            command.CreateParameter("@StateId", fingerprintModel.StateId);
            command.CreateParameter("@UpdatedDate", fingerprintModel.UpdatedDate);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        public static async Task<int> DeleteFingerprint(this DbConnection connection, FingerprintKey fingerprintKey, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"DELETE FROM `Fingerprint` AS `f` WHERE `f`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", fingerprintKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        private static async Task<FingerprintModel> GetFingerprintResultSet(DbCommand cmd, FingerprintModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new FingerprintModel();
                result.Id = (Int64)reader["Id"];
                result.CreatedById = (Int64)reader["CreatedById"];
                result.CreatedDate = (DateTime)reader["CreatedDate"];
                result.ExpirationDate = Convert.IsDBNull(reader["ExpirationDate"]) ? null : (DateTime?)reader["ExpirationDate"];
                result.FingerprintId = (Byte[])reader["FingerprintId"];
                result.IsActive = (Boolean)reader["IsActive"];
                result.LastUpdatedById = (Int64)reader["LastUpdatedById"];
                result.NmlsId = (Int64)reader["NmlsId"];
                result.RenewalDate = Convert.IsDBNull(reader["RenewalDate"]) ? null : (DateTime?)reader["RenewalDate"];
                result.StateId = (Int64)reader["StateId"];
                result.UpdatedDate = (DateTime)reader["UpdatedDate"];
            }
            reader.Close();
            return result;
        }
        public static async Task<List<GetFingerprintByGuidsResponseModel>> GetFingerprintByGuids(this DbConnection connection, GetFingerprintByGuidsRequestModel getFingerprintByGuidsRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            var testsJoined = string.Join(",", getFingerprintByGuidsRequestModel?.test.Select((x,y) => "@test" + y.ToString()).ToArray());
            string sql = @"SELECT `f`.`Id`, `f`.`CreatedById`, `f`.`CreatedDate`, `f`.`ExpirationDate`, `f`.`FingerprintId`, `f`.`IsActive`, `f`.`LastUpdatedById`, `f`.`NmlsId`, `f`.`RenewalDate`, `f`.`StateId`, `f`.`UpdatedDate`
				FROM `Fingerprint` AS `f`
				WHERE `f`.`FingerprintId` IN (" + testsJoined + @")";

            var command = connection.CreateCommand(sql, transaction, timeout);
            getFingerprintByGuidsRequestModel?.test.Select((x,y) => command.CreateParameter("@test" + y.ToString(), x)).ToArray();
            List<GetFingerprintByGuidsResponseModel> results = new List<GetFingerprintByGuidsResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                GetFingerprintByGuidsResponseModel result = new GetFingerprintByGuidsResponseModel();
                result.Fingerprint.Id = (Int64)reader[0];
                result.Fingerprint.CreatedById = (Int64)reader[1];
                result.Fingerprint.CreatedDate = (DateTime)reader[2];
                result.Fingerprint.ExpirationDate = Convert.IsDBNull(reader[3]) ? null : (DateTime?)reader[3];
                result.Fingerprint.FingerprintId = (Byte[])reader[4];
                result.Fingerprint.IsActive = (Boolean)reader[5];
                result.Fingerprint.LastUpdatedById = (Int64)reader[6];
                result.Fingerprint.NmlsId = (Int64)reader[7];
                result.Fingerprint.RenewalDate = Convert.IsDBNull(reader[8]) ? null : (DateTime?)reader[8];
                result.Fingerprint.StateId = (Int64)reader[9];
                result.Fingerprint.UpdatedDate = (DateTime)reader[10];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<GetFingerprintsByIdResponseModel>> GetFingerprintsById(this DbConnection connection, GetFingerprintsByIdRequestModel getFingerprintsByIdRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            var testsJoined = string.Join(",", getFingerprintsByIdRequestModel?.test.Select((x,y) => "@test" + y.ToString()).ToArray());
            string sql = @"SELECT `f`.`Id`, `f`.`FingerprintId`, `f`.`IsActive`
				FROM `Fingerprint` AS `f`
				WHERE `f`.`Id` IN (" + testsJoined + @")";

            var command = connection.CreateCommand(sql, transaction, timeout);
            getFingerprintsByIdRequestModel?.test.Select((x,y) => command.CreateParameter("@test" + y.ToString(), x)).ToArray();
            List<GetFingerprintsByIdResponseModel> results = new List<GetFingerprintsByIdResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                GetFingerprintsByIdResponseModel result = new GetFingerprintsByIdResponseModel();
                result.Fingerprint.Id = (Int64)reader[0];
                result.Fingerprint.FingerprintId = (Byte[])reader[1];
                result.Fingerprint.IsActive = (Boolean)reader[2];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<GetFingerprintByStateIdResponseModel>> GetFingerprintByStateId(this DbConnection connection, GetFingerprintByStateIdRequestModel getFingerprintByStateIdRequestModel, DbTransaction transaction = null, int? timeout = null)
        {
            var fingerprintIdsJoined = string.Join(",", getFingerprintByStateIdRequestModel?.fingerprintId.Select((x,y) => "@fingerprintId" + y.ToString()).ToArray());
            var stateIdsJoined = string.Join(",", getFingerprintByStateIdRequestModel?.stateId.Select((x,y) => "@stateId" + y.ToString()).ToArray());
            string sql = @"SELECT `f`.`Id`, `f`.`CreatedById`, `f`.`CreatedDate`, `f`.`ExpirationDate`, `f`.`FingerprintId`, `f`.`IsActive`, `f`.`LastUpdatedById`, `f`.`NmlsId`, `f`.`RenewalDate`, `f`.`StateId`, `f`.`UpdatedDate`, `s`.`Id`, `s`.`Name`, `s`.`StateId`
				FROM `Fingerprint` AS `f`
				INNER JOIN `States` AS `s` ON `f`.`StateId` = `s`.`Id`
				WHERE (`f`.`FingerprintId` IN (" + stateIdsJoined + @") AND (`f`.`IsActive` = @__Value_1)) AND `s`.`StateId` IN (" + stateIdsJoined + @")";

            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@__Value_1", getFingerprintByStateIdRequestModel.active);
            getFingerprintByStateIdRequestModel?.fingerprintId.Select((x,y) => command.CreateParameter("@fingerprintId" + y.ToString(), x)).ToArray();
            getFingerprintByStateIdRequestModel?.stateId.Select((x,y) => command.CreateParameter("@stateId" + y.ToString(), x)).ToArray();
            List<GetFingerprintByStateIdResponseModel> results = new List<GetFingerprintByStateIdResponseModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                GetFingerprintByStateIdResponseModel result = new GetFingerprintByStateIdResponseModel();
                result.Fingerprint.Id = (Int64)reader[0];
                result.Fingerprint.CreatedById = (Int64)reader[1];
                result.Fingerprint.CreatedDate = (DateTime)reader[2];
                result.Fingerprint.ExpirationDate = Convert.IsDBNull(reader[3]) ? null : (DateTime?)reader[3];
                result.Fingerprint.FingerprintId = (Byte[])reader[4];
                result.Fingerprint.IsActive = (Boolean)reader[5];
                result.Fingerprint.LastUpdatedById = (Int64)reader[6];
                result.Fingerprint.NmlsId = (Int64)reader[7];
                result.Fingerprint.RenewalDate = Convert.IsDBNull(reader[8]) ? null : (DateTime?)reader[8];
                result.Fingerprint.StateId = (Int64)reader[9];
                result.Fingerprint.UpdatedDate = (DateTime)reader[10];
                result.State.Id = (Int64)reader[11];
                result.State.Name = Convert.IsDBNull(reader[12]) ? null : (String)reader[12];
                result.State.StateId = (Byte[])reader[13];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        private static DbCommand CreateCommand(this DbConnection connection, string sql, DbTransaction transaction = null, int? timeout = null)
        {
            var dbCommand = connection.CreateCommand();
            dbCommand.CommandText = sql;
            dbCommand.CommandType = CommandType.Text;
            dbCommand.Transaction = transaction;
            dbCommand.CommandTimeout = timeout.HasValue ? timeout.Value : dbCommand.CommandTimeout;
            return dbCommand;
        }
        private static DbParameter CreateParameter(this DbCommand command, string name, object value)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value;
            command.Parameters.Add(parameter);
            return parameter;
        }
    }
}
