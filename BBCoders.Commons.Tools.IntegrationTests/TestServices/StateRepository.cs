//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data;
using System.Data.Common;

namespace BBCoders.Example.DataServices
{
    public static class StateRepository
    {
        public static async Task<StateModel> SelectState(this DbConnection connection, StateKey stateKey, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT * FROM `States` AS `s` WHERE `s`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", stateKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await GetStateResultSet(command);
        }
        public static async Task<StateModel> InsertState(this DbConnection connection, StateModel stateModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"INSERT INTO `States` (`Name`, `StateId`) VALUES (@Name, @StateId);
SELECT * FROM `States` AS `s` WHERE `s`.`Id` = LAST_INSERT_ID()";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Name", stateModel.Name);
            command.CreateParameter("@StateId", stateModel.StateId);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await GetStateResultSet(command, stateModel);
        }
        public static async Task<int> UpdateState(this DbConnection connection, StateModel stateModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"UPDATE `States` AS `s` SET `s`.`Name` = @Name, `s`.`StateId` = @StateId WHERE `s`.`Id` = @Id;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", stateModel.Id);
            command.CreateParameter("@Name", stateModel.Name);
            command.CreateParameter("@StateId", stateModel.StateId);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        public static async Task<int> DeleteState(this DbConnection connection, StateKey stateKey, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"DELETE FROM `States` AS `s` WHERE `s`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", stateKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        private static async Task<StateModel> GetStateResultSet(DbCommand cmd, StateModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new StateModel();
                result.Id = (Int64)reader["Id"];
                result.Name = Convert.IsDBNull(reader["Name"]) ? null : (String)reader["Name"];
                result.StateId = (Byte[])reader["StateId"];
            }
            reader.Close();
            return result;
        }
        private static DbCommand CreateCommand(this DbConnection connection, string sql, DbTransaction transaction = null, int? timeout = null)
        {
            var dbCommand = connection.CreateCommand();
            dbCommand.CommandText = sql;
            dbCommand.CommandType = CommandType.Text;
            dbCommand.Transaction = transaction;
            dbCommand.CommandTimeout = timeout.HasValue ? timeout.Value : dbCommand.CommandTimeout;
            return dbCommand;
        }
        private static DbParameter CreateParameter(this DbCommand command, string name, object value)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value;
            command.Parameters.Add(parameter);
            return parameter;
        }
    }
}
