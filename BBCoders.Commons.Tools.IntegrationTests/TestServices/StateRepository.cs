//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data;
using System.Data.Common;
using System.Text;

namespace BBCoders.Example.DataServices
{
    public static class StateRepository
    {
        public static async Task<List<StateModel>> SelectBatchState(this DbConnection connection, List<StateKey> StateKey, DbTransaction transaction = null, int? timeout = null)
        {
            var IdsJoined = string.Join(",", StateKey.Select((_, idx) => "@Id" + idx));
            var sql = @"SELECT `s`.`Id`,`s`.`Name`,`s`.`StateId` FROM `States` AS `s` WHERE `s`.`Id` IN (" + IdsJoined + @");";
            var command = connection.CreateCommand(sql, transaction, timeout);
            for (var i = 0; i< StateKey.Count(); i++)
            {
                command.CreateParameter("@Id" + i, StateKey[i].Id);
            }
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<StateModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new StateModel();
                result.Id = (Int64)reader[0];
                result.Name = Convert.IsDBNull(reader[1]) ? null : (String?)reader[1];
                result.StateId = (Byte[])reader[2];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<StateModel>> InsertBatchState(this DbConnection connection, List<StateModel> StateModel, DbTransaction transaction = null, int? timeout = null)
        {
            var IdsJoined = string.Join(",", StateModel.Select((_, idx) => "@Id" + idx));
            var sqlBuilder = new StringBuilder();
            for (var i = 0; i< StateModel.Count(); i++)
            {
                sqlBuilder.AppendLine($"INSERT INTO `States` (`Name`, `StateId`) VALUES (@Name{i}, @StateId{i}); SELECT `s`.`Id`,`s`.`Name`,`s`.`StateId` FROM `States` AS `s` WHERE `s`.`Id` = LAST_INSERT_ID();");
            }
            var sql = sqlBuilder.ToString();
            var command = connection.CreateCommand(sql, transaction, timeout);
            for (var i = 0; i< StateModel.Count(); i++)
            {
                command.CreateParameter("@Id" + i, StateModel[i].Id);
                command.CreateParameter("@Name" + i, StateModel[i].Name);
                command.CreateParameter("@StateId" + i, StateModel[i].StateId);
            }
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<StateModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new StateModel();
                result.Id = (Int64)reader[0];
                result.Name = Convert.IsDBNull(reader[1]) ? null : (String?)reader[1];
                result.StateId = (Byte[])reader[2];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<List<StateModel>> UpdateBatchState(this DbConnection connection, List<StateModel> StateModel, DbTransaction transaction = null, int? timeout = null)
        {
            var IdsJoined = string.Join(",", StateModel.Select((_, idx) => "@Id" + idx));
            var sqlBuilder = new StringBuilder();
            for (var i = 0; i< StateModel.Count(); i++)
            {
                sqlBuilder.AppendLine($"UPDATE `States` AS `s` SET `s`.`Name` = @Name{i}, `s`.`StateId` = @StateId{i} WHERE `s`.`Id` = IdsJoined;SELECT `s`.`Id`,`s`.`Name`,`s`.`StateId` FROM `States` AS `s` WHERE `s`.`Id` = @Id{i};");
            }
            var sql = sqlBuilder.ToString();
            var command = connection.CreateCommand(sql, transaction, timeout);
            for (var i = 0; i< StateModel.Count(); i++)
            {
                command.CreateParameter("@Id" + i, StateModel[i].Id);
                command.CreateParameter("@Name" + i, StateModel[i].Name);
                command.CreateParameter("@StateId" + i, StateModel[i].StateId);
            }
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<StateModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new StateModel();
                result.Id = (Int64)reader[0];
                result.Name = Convert.IsDBNull(reader[1]) ? null : (String?)reader[1];
                result.StateId = (Byte[])reader[2];
                results.Add(result);
            }
            reader.Close();
            return results;
        }
        public static async Task<int> DeleteBatchState(this DbConnection connection, List<StateKey> StateKey, DbTransaction transaction = null, int? timeout = null)
        {
            var IdsJoined = string.Join(",", StateKey.Select((_, idx) => "@Id" + idx));
            var sql = @"DELETE FROM `States` AS `s` WHERE `s`.`Id` IN (" + IdsJoined + @")";
            var command = connection.CreateCommand(sql, transaction, timeout);
            for (var i = 0; i< StateKey.Count(); i++)
            {
                command.CreateParameter("@Id" + i, StateKey[i].Id);
            }
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        public static async Task<StateModel> SelectState(this DbConnection connection, StateKey StateKey, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = @"SELECT `s`.`Id`,`s`.`Name`,`s`.`StateId` FROM `States` AS `s` WHERE `s`.`Id` = @Id;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", StateKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<StateModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new StateModel();
                result.Id = (Int64)reader[0];
                result.Name = Convert.IsDBNull(reader[1]) ? null : (String?)reader[1];
                result.StateId = (Byte[])reader[2];
                results.Add(result);
            }
            reader.Close();
            return results.FirstOrDefault();
        }
        public static async Task<StateModel> InsertState(this DbConnection connection, StateModel StateModel, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = @"INSERT INTO States (`Name`, `StateId`) VALUES (@Name, @StateId);
            SELECT `s`.`Id`,`s`.`Name`,`s`.`StateId` FROM `States` AS `s` WHERE `s`.`Id` = LAST_INSERT_ID();";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Name", StateModel.Name);
            command.CreateParameter("@StateId", StateModel.StateId);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<StateModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new StateModel();
                result.Id = (Int64)reader[0];
                result.Name = Convert.IsDBNull(reader[1]) ? null : (String?)reader[1];
                result.StateId = (Byte[])reader[2];
                results.Add(result);
            }
            reader.Close();
            return results.FirstOrDefault();
        }
        public static async Task<StateModel> UpdateState(this DbConnection connection, StateModel StateModel, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = @"UPDATE `States` AS `s` SET `s`.`Name` = @Name, `s`.`StateId` = @StateId WHERE `s`.`Id` = @Id;SELECT `s`.`Id`,`s`.`Name`,`s`.`StateId` FROM `States` AS `s` WHERE `s`.`Id` = @Id;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", StateModel.Id);
            command.CreateParameter("@Name", StateModel.Name);
            command.CreateParameter("@StateId", StateModel.StateId);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            var results = new List<StateModel>();
            var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var result = new StateModel();
                result.Id = (Int64)reader[0];
                result.Name = Convert.IsDBNull(reader[1]) ? null : (String?)reader[1];
                result.StateId = (Byte[])reader[2];
                results.Add(result);
            }
            reader.Close();
            return results.FirstOrDefault();
        }
        public static async Task<int> DeleteState(this DbConnection connection, StateKey StateKey, DbTransaction transaction = null, int? timeout = null)
        {
            var sql = @"DELETE FROM `States` AS `s` WHERE `s`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", StateKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        private static DbCommand CreateCommand(this DbConnection connection, string sql, DbTransaction transaction = null, int? timeout = null)
        {
            var dbCommand = connection.CreateCommand();
            dbCommand.CommandText = sql;
            dbCommand.CommandType = CommandType.Text;
            dbCommand.Transaction = transaction;
            dbCommand.CommandTimeout = timeout.HasValue ? timeout.Value : dbCommand.CommandTimeout;
            return dbCommand;
        }
        private static DbParameter CreateParameter(this DbCommand command, string name, object value)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value;
            command.Parameters.Add(parameter);
            return parameter;
        }
    }
}
