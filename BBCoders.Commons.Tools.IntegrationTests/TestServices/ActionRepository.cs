//------------------------------------------------------------------------------
// <auto-generated>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Data;
using System.Data.Common;

namespace BBCoders.Example.DataServices
{
    public static class ActionRepository
    {
        public static async Task<ActionModel> SelectAction(this DbConnection connection, ActionKey actionKey, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"SELECT * FROM `Actions` AS `a` WHERE `a`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", actionKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await GetActionResultSet(command);
        }
        public static async Task<ActionModel> InsertAction(this DbConnection connection, ActionModel actionModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"INSERT INTO `Actions` (`ActionId`, `Name`) VALUES (@ActionId, @Name);
SELECT * FROM `Actions` AS `a` WHERE `a`.`Id` = LAST_INSERT_ID()";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@ActionId", actionModel.ActionId);
            command.CreateParameter("@Name", actionModel.Name);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await GetActionResultSet(command, actionModel);
        }
        public static async Task<int> UpdateAction(this DbConnection connection, ActionModel actionModel, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"UPDATE `Actions` AS `a` SET `a`.`ActionId` = @ActionId, `a`.`Name` = @Name WHERE `a`.`Id` = @Id;";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", actionModel.Id);
            command.CreateParameter("@ActionId", actionModel.ActionId);
            command.CreateParameter("@Name", actionModel.Name);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        public static async Task<int> DeleteAction(this DbConnection connection, ActionKey actionKey, DbTransaction transaction = null, int? timeout = null)
        {
            string sql = @"DELETE FROM `Actions` AS `a` WHERE `a`.`Id` = @Id";
            var command = connection.CreateCommand(sql, transaction, timeout);
            command.CreateParameter("@Id", actionKey.Id);
            if (connection.State == ConnectionState.Closed)
                await connection.OpenAsync();
            return await command.ExecuteNonQueryAsync();
        }
        private static async Task<ActionModel> GetActionResultSet(DbCommand cmd, ActionModel result = null)
        {
            var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                if(result == null) result = new ActionModel();
                result.Id = (Int64)reader["Id"];
                result.ActionId = (Byte[])reader["ActionId"];
                result.Name = (String)reader["Name"];
            }
            reader.Close();
            return result;
        }
        private static DbCommand CreateCommand(this DbConnection connection, string sql, DbTransaction transaction = null, int? timeout = null)
        {
            var dbCommand = connection.CreateCommand();
            dbCommand.CommandText = sql;
            dbCommand.CommandType = CommandType.Text;
            dbCommand.Transaction = transaction;
            dbCommand.CommandTimeout = timeout.HasValue ? timeout.Value : dbCommand.CommandTimeout;
            return dbCommand;
        }
        private static DbParameter CreateParameter(this DbCommand command, string name, object value)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value;
            command.Parameters.Add(parameter);
            return parameter;
        }
    }
}
