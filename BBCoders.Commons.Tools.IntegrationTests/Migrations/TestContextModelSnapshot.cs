// <auto-generated />
using System;
using BBCoders.Commons.Tools.IntegrationTests.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BBCoders.Commons.Tools.IntegrationTests.Migrations
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BBCoders.Commons.Tools.IntegrationTests.Context.Action", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId")
                        .IsUnique();

                    b.ToTable("Actions", (string)null);
                });

            modelBuilder.Entity("BBCoders.Commons.Tools.IntegrationTests.Context.Fingerprint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FingerprintId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("LastUpdatedById")
                        .HasColumnType("bigint");

                    b.Property<long>("NmlsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FingerprintId")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("Fingerprint", (string)null);
                });

            modelBuilder.Entity("BBCoders.Commons.Tools.IntegrationTests.Context.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("FingerPrintId")
                        .HasColumnType("bigint");

                    b.Property<long>("LastUpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)");

                    b.Property<long>("ScheduleSiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("FingerPrintId");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.HasIndex("ScheduleSiteId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("BBCoders.Commons.Tools.IntegrationTests.Context.ScheduleSite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("ScheduleSiteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleSiteId")
                        .IsUnique();

                    b.ToTable("ScheduleSites", (string)null);
                });

            modelBuilder.Entity("BBCoders.Commons.Tools.IntegrationTests.Context.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("StateId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StateId")
                        .IsUnique();

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("BBCoders.Commons.Tools.IntegrationTests.Context.Status", b =>
                {
                    b.Property<long>("Id1")
                        .HasColumnType("bigint");

                    b.Property<long>("Id2")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("StatusId")
                        .IsUnique();

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("BBCoders.Commons.Tools.IntegrationTests.Context.Fingerprint", b =>
                {
                    b.HasOne("BBCoders.Commons.Tools.IntegrationTests.Context.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("BBCoders.Commons.Tools.IntegrationTests.Context.Schedule", b =>
                {
                    b.HasOne("BBCoders.Commons.Tools.IntegrationTests.Context.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId");

                    b.HasOne("BBCoders.Commons.Tools.IntegrationTests.Context.Fingerprint", "Fingerprint")
                        .WithMany()
                        .HasForeignKey("FingerPrintId");

                    b.HasOne("BBCoders.Commons.Tools.IntegrationTests.Context.ScheduleSite", "scheduleSite")
                        .WithMany()
                        .HasForeignKey("ScheduleSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Fingerprint");

                    b.Navigation("scheduleSite");
                });
#pragma warning restore 612, 618
        }
    }
}
